// Generated by `wit-bindgen` 0.30.0. DO NOT EDIT!
// <auto-generated />
#nullable enable

using System;
using System.Runtime.CompilerServices;
using System.Collections;
using System.Runtime.InteropServices;
using System.Text;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;

namespace SpinHttpWorld.wit.imports.fermyon.spin.v2_0_0;

public interface IRdbmsTypes {

    /**
    * Errors related to interacting with a database.
    */

    public class Error {
        public readonly byte Tag;
        private readonly object? value;

        private Error(byte tag, object? value) {
            this.Tag = tag;
            this.value = value;
        }

        public static Error connectionFailed(string connectionFailed) {
            return new Error(CONNECTION_FAILED, connectionFailed);
        }

        public static Error badParameter(string badParameter) {
            return new Error(BAD_PARAMETER, badParameter);
        }

        public static Error queryFailed(string queryFailed) {
            return new Error(QUERY_FAILED, queryFailed);
        }

        public static Error valueConversionFailed(string valueConversionFailed) {
            return new Error(VALUE_CONVERSION_FAILED, valueConversionFailed);
        }

        public static Error other(string other) {
            return new Error(OTHER, other);
        }

        public string AsConnectionFailed
        {
            get
            {
                if (Tag == CONNECTION_FAILED)
                return (string)value!;
                else
                throw new ArgumentException("expected CONNECTION_FAILED, got " + Tag);
            }
        }

        public string AsBadParameter
        {
            get
            {
                if (Tag == BAD_PARAMETER)
                return (string)value!;
                else
                throw new ArgumentException("expected BAD_PARAMETER, got " + Tag);
            }
        }

        public string AsQueryFailed
        {
            get
            {
                if (Tag == QUERY_FAILED)
                return (string)value!;
                else
                throw new ArgumentException("expected QUERY_FAILED, got " + Tag);
            }
        }

        public string AsValueConversionFailed
        {
            get
            {
                if (Tag == VALUE_CONVERSION_FAILED)
                return (string)value!;
                else
                throw new ArgumentException("expected VALUE_CONVERSION_FAILED, got " + Tag);
            }
        }

        public string AsOther
        {
            get
            {
                if (Tag == OTHER)
                return (string)value!;
                else
                throw new ArgumentException("expected OTHER, got " + Tag);
            }
        }

        public const byte CONNECTION_FAILED = 0;
        public const byte BAD_PARAMETER = 1;
        public const byte QUERY_FAILED = 2;
        public const byte VALUE_CONVERSION_FAILED = 3;
        public const byte OTHER = 4;
    }

    /**
    * Data types for a database column
    */

    public enum DbDataType {
        BOOLEAN, INT8, INT16, INT32, INT64, UINT8, UINT16, UINT32, UINT64, FLOATING32, FLOATING64, STR, BINARY, OTHER
    }

    /**
    * Database values
    */

    public class DbValue {
        public readonly byte Tag;
        private readonly object? value;

        private DbValue(byte tag, object? value) {
            this.Tag = tag;
            this.value = value;
        }

        public static DbValue boolean(bool boolean) {
            return new DbValue(BOOLEAN, boolean);
        }

        public static DbValue int8(sbyte int8) {
            return new DbValue(INT8, int8);
        }

        public static DbValue int16(short int16) {
            return new DbValue(INT16, int16);
        }

        public static DbValue int32(int int32) {
            return new DbValue(INT32, int32);
        }

        public static DbValue int64(long int64) {
            return new DbValue(INT64, int64);
        }

        public static DbValue uint8(byte uint8) {
            return new DbValue(UINT8, uint8);
        }

        public static DbValue uint16(ushort uint16) {
            return new DbValue(UINT16, uint16);
        }

        public static DbValue uint32(uint uint32) {
            return new DbValue(UINT32, uint32);
        }

        public static DbValue uint64(ulong uint64) {
            return new DbValue(UINT64, uint64);
        }

        public static DbValue floating32(float floating32) {
            return new DbValue(FLOATING32, floating32);
        }

        public static DbValue floating64(double floating64) {
            return new DbValue(FLOATING64, floating64);
        }

        public static DbValue str(string str) {
            return new DbValue(STR, str);
        }

        public static DbValue binary(byte[] binary) {
            return new DbValue(BINARY, binary);
        }

        public static DbValue dbNull() {
            return new DbValue(DB_NULL, null);
        }

        public static DbValue unsupported() {
            return new DbValue(UNSUPPORTED, null);
        }

        public bool AsBoolean
        {
            get
            {
                if (Tag == BOOLEAN)
                return (bool)value!;
                else
                throw new ArgumentException("expected BOOLEAN, got " + Tag);
            }
        }

        public sbyte AsInt8
        {
            get
            {
                if (Tag == INT8)
                return (sbyte)value!;
                else
                throw new ArgumentException("expected INT8, got " + Tag);
            }
        }

        public short AsInt16
        {
            get
            {
                if (Tag == INT16)
                return (short)value!;
                else
                throw new ArgumentException("expected INT16, got " + Tag);
            }
        }

        public int AsInt32
        {
            get
            {
                if (Tag == INT32)
                return (int)value!;
                else
                throw new ArgumentException("expected INT32, got " + Tag);
            }
        }

        public long AsInt64
        {
            get
            {
                if (Tag == INT64)
                return (long)value!;
                else
                throw new ArgumentException("expected INT64, got " + Tag);
            }
        }

        public byte AsUint8
        {
            get
            {
                if (Tag == UINT8)
                return (byte)value!;
                else
                throw new ArgumentException("expected UINT8, got " + Tag);
            }
        }

        public ushort AsUint16
        {
            get
            {
                if (Tag == UINT16)
                return (ushort)value!;
                else
                throw new ArgumentException("expected UINT16, got " + Tag);
            }
        }

        public uint AsUint32
        {
            get
            {
                if (Tag == UINT32)
                return (uint)value!;
                else
                throw new ArgumentException("expected UINT32, got " + Tag);
            }
        }

        public ulong AsUint64
        {
            get
            {
                if (Tag == UINT64)
                return (ulong)value!;
                else
                throw new ArgumentException("expected UINT64, got " + Tag);
            }
        }

        public float AsFloating32
        {
            get
            {
                if (Tag == FLOATING32)
                return (float)value!;
                else
                throw new ArgumentException("expected FLOATING32, got " + Tag);
            }
        }

        public double AsFloating64
        {
            get
            {
                if (Tag == FLOATING64)
                return (double)value!;
                else
                throw new ArgumentException("expected FLOATING64, got " + Tag);
            }
        }

        public string AsStr
        {
            get
            {
                if (Tag == STR)
                return (string)value!;
                else
                throw new ArgumentException("expected STR, got " + Tag);
            }
        }

        public byte[] AsBinary
        {
            get
            {
                if (Tag == BINARY)
                return (byte[])value!;
                else
                throw new ArgumentException("expected BINARY, got " + Tag);
            }
        }

        public const byte BOOLEAN = 0;
        public const byte INT8 = 1;
        public const byte INT16 = 2;
        public const byte INT32 = 3;
        public const byte INT64 = 4;
        public const byte UINT8 = 5;
        public const byte UINT16 = 6;
        public const byte UINT32 = 7;
        public const byte UINT64 = 8;
        public const byte FLOATING32 = 9;
        public const byte FLOATING64 = 10;
        public const byte STR = 11;
        public const byte BINARY = 12;
        public const byte DB_NULL = 13;
        public const byte UNSUPPORTED = 14;
    }

    /**
    * Values used in parameterized queries
    */

    public class ParameterValue {
        public readonly byte Tag;
        private readonly object? value;

        private ParameterValue(byte tag, object? value) {
            this.Tag = tag;
            this.value = value;
        }

        public static ParameterValue boolean(bool boolean) {
            return new ParameterValue(BOOLEAN, boolean);
        }

        public static ParameterValue int8(sbyte int8) {
            return new ParameterValue(INT8, int8);
        }

        public static ParameterValue int16(short int16) {
            return new ParameterValue(INT16, int16);
        }

        public static ParameterValue int32(int int32) {
            return new ParameterValue(INT32, int32);
        }

        public static ParameterValue int64(long int64) {
            return new ParameterValue(INT64, int64);
        }

        public static ParameterValue uint8(byte uint8) {
            return new ParameterValue(UINT8, uint8);
        }

        public static ParameterValue uint16(ushort uint16) {
            return new ParameterValue(UINT16, uint16);
        }

        public static ParameterValue uint32(uint uint32) {
            return new ParameterValue(UINT32, uint32);
        }

        public static ParameterValue uint64(ulong uint64) {
            return new ParameterValue(UINT64, uint64);
        }

        public static ParameterValue floating32(float floating32) {
            return new ParameterValue(FLOATING32, floating32);
        }

        public static ParameterValue floating64(double floating64) {
            return new ParameterValue(FLOATING64, floating64);
        }

        public static ParameterValue str(string str) {
            return new ParameterValue(STR, str);
        }

        public static ParameterValue binary(byte[] binary) {
            return new ParameterValue(BINARY, binary);
        }

        public static ParameterValue dbNull() {
            return new ParameterValue(DB_NULL, null);
        }

        public bool AsBoolean
        {
            get
            {
                if (Tag == BOOLEAN)
                return (bool)value!;
                else
                throw new ArgumentException("expected BOOLEAN, got " + Tag);
            }
        }

        public sbyte AsInt8
        {
            get
            {
                if (Tag == INT8)
                return (sbyte)value!;
                else
                throw new ArgumentException("expected INT8, got " + Tag);
            }
        }

        public short AsInt16
        {
            get
            {
                if (Tag == INT16)
                return (short)value!;
                else
                throw new ArgumentException("expected INT16, got " + Tag);
            }
        }

        public int AsInt32
        {
            get
            {
                if (Tag == INT32)
                return (int)value!;
                else
                throw new ArgumentException("expected INT32, got " + Tag);
            }
        }

        public long AsInt64
        {
            get
            {
                if (Tag == INT64)
                return (long)value!;
                else
                throw new ArgumentException("expected INT64, got " + Tag);
            }
        }

        public byte AsUint8
        {
            get
            {
                if (Tag == UINT8)
                return (byte)value!;
                else
                throw new ArgumentException("expected UINT8, got " + Tag);
            }
        }

        public ushort AsUint16
        {
            get
            {
                if (Tag == UINT16)
                return (ushort)value!;
                else
                throw new ArgumentException("expected UINT16, got " + Tag);
            }
        }

        public uint AsUint32
        {
            get
            {
                if (Tag == UINT32)
                return (uint)value!;
                else
                throw new ArgumentException("expected UINT32, got " + Tag);
            }
        }

        public ulong AsUint64
        {
            get
            {
                if (Tag == UINT64)
                return (ulong)value!;
                else
                throw new ArgumentException("expected UINT64, got " + Tag);
            }
        }

        public float AsFloating32
        {
            get
            {
                if (Tag == FLOATING32)
                return (float)value!;
                else
                throw new ArgumentException("expected FLOATING32, got " + Tag);
            }
        }

        public double AsFloating64
        {
            get
            {
                if (Tag == FLOATING64)
                return (double)value!;
                else
                throw new ArgumentException("expected FLOATING64, got " + Tag);
            }
        }

        public string AsStr
        {
            get
            {
                if (Tag == STR)
                return (string)value!;
                else
                throw new ArgumentException("expected STR, got " + Tag);
            }
        }

        public byte[] AsBinary
        {
            get
            {
                if (Tag == BINARY)
                return (byte[])value!;
                else
                throw new ArgumentException("expected BINARY, got " + Tag);
            }
        }

        public const byte BOOLEAN = 0;
        public const byte INT8 = 1;
        public const byte INT16 = 2;
        public const byte INT32 = 3;
        public const byte INT64 = 4;
        public const byte UINT8 = 5;
        public const byte UINT16 = 6;
        public const byte UINT32 = 7;
        public const byte UINT64 = 8;
        public const byte FLOATING32 = 9;
        public const byte FLOATING64 = 10;
        public const byte STR = 11;
        public const byte BINARY = 12;
        public const byte DB_NULL = 13;
    }

    /**
    * A database column
    */

    public class Column {
        public readonly string name;
        public readonly DbDataType dataType;

        public Column(string name, DbDataType dataType) {
            this.name = name;
            this.dataType = dataType;
        }
    }

    /**
    * A set of database rows
    */

    public class RowSet {
        public readonly List<Column> columns;
        public readonly List<List<DbValue>> rows;

        public RowSet(List<Column> columns, List<List<DbValue>> rows) {
            this.columns = columns;
            this.rows = rows;
        }
    }

}
